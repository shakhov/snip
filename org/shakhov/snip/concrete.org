* Расчёт изгибаемых железобетонных элементов
:PROPERTIES:
:noweb-sep: "\n\n"
:END:

** Расчет по прочности нормальных сечений

*** TODO $\xi$ --- относительная высота сжатой зоны
:PROPERTIES:
:noweb-ref: xi-y
:END:

**** Относительная высота сжатой зоны
Относительная высота сжатой зоны $\xi = x/h_0$ не должна превышать предельной величины $\xi_y$
\begin{equation}
\xi_y = \cfrac{\omega}{1 +
\frac{\sigma_1}{\sigma_2}\left(1-\frac{\omega}{1.1}\right)}
\end{equation}

#+begin_src clojure
  :xi<=xi-y
  (fnk
   ""
   [xi xi-y]
   (<= xi xi-y))

  :xi
  (fnk
   ""
   [h0 x]
   (/ x h0))

  :xi-y
  (fnk
   ""
   [omega sigma-1 sigma-2]
   (/ omega
      (+ 1 (* (/ sigma-1 sigma-2)
              (- 1 (/ omega 1.1))))))
#+end_src

где:
- $\omega$ --- коэффициент равный:
  - $\omega = 0.85 - 0.008 R_c$ --- для элементов с обычным армированием;
#  - $\omega = 0.85 - 0.008 R_c + \delta \le 0.9$ --- для элементов с
#    косвенным армированием;
#    - $\delta = 10 \mu \le 0.15$
#    - $\mu$ --- коэффициент армирования;
- $\sigma_1$ --- напряжения в арматуре равные:
  - $R_r$ --- для ненапрягаемой арматуры;
  - $R_p + 500\ \mathrm{МПа} - \sigma_p$ --- для напрягаемой арматуры;
- $\sigma_2 = 500\ \mathrm{МПа}$ --- предельные напряжения в арматуре.

#+begin_src clojure
  :omega
  (fnk
   ""
   [Rc]
   (- 0.85 (* ((/ si/MPa) 0.008) Rc)))

  :sigma-1
  (fnk
   ""
   [Rr Rp sigma-p]
   (if (zero? sigma-p)
     Rr
     (+ Rp (si/MPa 500) (- sigma-p))))

  :sigma-2
  (fnk
   ""
   []
   (si/MPa 500))

#+end_src

**** Код потока
#+begin_src clojure :noweb yes :noweb-ref xi-flow
  (def xi-flow
    (flow
     {
      <<xi-y>>
      }))
#+end_src


*** Расчёт прямоугольных сечений
:PROPERTIES:
:NAME: rect-bending
:noweb-ref: rect-bending
:END:
**** $M_{max}$ --- предельный момент

Предельно допустимый момент при изгибе прямоугольных железобетонных сечений вычисляется по формуле:
\begin{equation}
M \le M_{max} = R_c b x (h_0 - 0.5 x) + N_{rc} (h_{01} - a_{rc}) + \sigma_{pc} A_{pc} (h_0 - a_p)
\end{equation}

#+begin_src clojure
  :M-max
  (fnk
   ""
   [Rc b x h0 h01 Nrc arc sigma-pc Apc apc]
   (+ (* Rc b x
         (- h0 (* 0.5 x)))
      (* Nrc
         (- h01 arc))
      (* sigma-pc Apc
         (- h0 apc))))
#+end_src

**** $x$ --- высота сжатой зоны

Высота сжатой зоны определяется по формуле:
\begin{equation}
x = \frac{R_p A_p + N_r - N_{rc} - \sigma_{pc} A_{pc}} {R_c b}
\end{equation}

#+begin_src clojure
  :x
  (fnk
   ""
   [Rc b Ap Apc Rp sigma-pc Nr Nrc]
   (/ (+ (* Rp Ap)
         Nr
         (* -1 Nrc)
         (* -1 sigma-pc Apc))
      (* Rc b)))
#+end_src

**** Растянутая арматура
Параметры растянутой арматуры извлекаются из структуры исходных данных

#+begin_src clojure
  :bottom-rebar
  (fnk
   [reinf]
   (:bottom reinf))

  :Ari
  (fnk
   [bottom-rebar]
   (map (fn [{:keys [n d rebar]}]
          (* n ((:A rebar) d)))
        bottom-rebar))

  :Rri
  (fnk
   [bottom-rebar]
   (map #(get-in % [:rebar :Rr]) bottom-rebar))

  :ari
  (fnk
   [bottom-rebar]
   (map :ar bottom-rebar))

  :Ar
  (fnk
   [Ari]
   (apply + ((pow si/cm 2) 0) Ari))
#+end_src

**** Учитываемая сжатая араматура
Параметры сжатой арматуры извлекаются из структуры исходных данных

#+begin_src clojure
  :top-rebar
  (fnk
   [reinf]
   (:top reinf))

  :Arci
  (fnk
   [top-rebar]
   (map (fn [{:keys [n d rebar]}]
          (* n ((:A rebar) d)))
        top-rebar))

  :Rrci
  (fnk
   [top-rebar]
   (map #(get-in % [:rebar :Rr]) top-rebar))

  :arci
  (fnk
   [top-rebar]
   (map :ar top-rebar))

  :Arc
  (fnk
   [Arci]
   (apply + ((pow si/cm 2) 0) Arci))
#+end_src

**** $N_r$ --- равнодействующая усилий в растянутой ненапрягаемой арматуре
Суммарное предельное усилие в растянутой арматуре $N_r$ вычисляется по формуле:
\begin{equation}
N_r = \sum\limits_i A_{r,i} R_{r,i}
\end{equation}

#+begin_src clojure
  :Nr
  (fnk
   [Ari Rri]
   (apply + (si/N 0) (map * Ari Rri)))
#+end_src

**** $N_{rc}$ --- равнодействующая усилий в учитываемой сжатой ненапрягаемой арматуре
Суммарное предельное усилие в учитываемой в расчете сжатой арматуре $N_{rc}$ вычисляется по формуле:
\begin{equation}
N_{rc} = \sum\limits_i A_{rc,i} R_{rc,i}
\end{equation}

#+begin_src clojure
 :Nrc
 (fnk
   [Arci Rrci]
   (apply + (si/N 0) (map * Arci Rrci)))
#+end_src

**** Центр тяжести сжатой и растянутой арматуры
$a_r$ --- расстояние от растянутой грани бетона до центра тяжести
растянутой ненапрягаемой арматуры
\begin{equation}
a_r = \cfrac{\sum_i A_{r,i}R_{r,i} a_{r,i}}{N_r}
\end{equation}
#+begin_src clojure
  :ar
  (fnk
   [Nr Ari Rri ari]
   (/ (apply + (map * Ari Rri ari))
      Nr))
#+end_src

$a_{rc}$ --- расстояние от сжатой грани бетона до центра тяжести
сжатой ненапрягаемой арматуры
\begin{equation}
a_{rc} = \cfrac{\sum_i A_{rc,i} R_{rc,i} a_{rc,i}} {N_{rc}}
\end{equation}
#+begin_src clojure
  :arc
  (fnk
   [Nrc Arci Rrci arci]
   (if (zero? Nrc)
     (si/cm 0)
     (/ (apply + (map * Arci Rrci arci))
        Nrc)))
#+end_src

**** $h_0$, $h_{01}$ --- рабочая высота сечения

Рабочая высота для ненапрягаемой сжатой арматуры равна $h_{01} = h - a_r$.
#+begin_src clojure
  :h01
  (fnk
   [h ar]
   (- h ar))
#+end_src

Рабочая высота сечения $h_0$ принимается от равнодействующей усилий в напрягаемой и ненапрягаемой арматуре.
\begin{equation}
h_0 = \cfrac{N_r h_{01} + A_p R_p (h - a_p)}{N_r + A_p R_p}
\end{equation}

При отсутствии напрягаемой арматуры $h_0 = h_{01}$.

#+begin_src clojure
  :h0
  (fnk
   [h h01 ap Nr Ap Rp]
   (if (zero? Ap)
     h01
     (/ (+ (* Nr h01)
           (* Ap Rp (- h ap)))
        (+ Nr
           (* Ap Rp)))))
#+end_src

**** Учет напрягаемой сжатой арматуры
Напрягаемую арматуру, распложоженную в сжатой зоне и имеющую сцепление с бетоном, следует вводить в расчёт с напряжением:
\begin{equation}
\sigma_{pc} = R_{pc} - \sigma_{pc1}
\end{equation}

где:
- $R_{pc}$ --- учитываемое расчётом наибольшее сжимающее напряжение в напрягаемой арматуре;
- $\sigma_{pc1}$ --- расчётное напряжение в напрягаемой арматуре (за вычетом всех потерь) при коэффициенте надежности $\gamma_g = 1.1$; при $\sigma_{pc} \le R_{pc}$ принимается $\sigma_{pc} = 0$.

#+begin_src clojure
  :sigma-pc
  (fnk
   ""
   [Rpc sigma-pc1]
   (if (<= sigma-pc1 Rpc)
     (si/MPa 0.0)
     (- Rpc sigma-pc1)))
#+end_src

**** Учет сжатой ненапрягаемой арматуры
Ненапрягаемая арматура сжатой зоны  $A_{rc}$ учитывается полностью ($A_{rc} = A_{rc}$), если $x_2 \ge 2a_{rc}$, где $x_2$ --- высота сжатой зоны, вычесленная с учетом $A_{rc}$.
При $x_1 < 2a_{rc}$ арматура $A_{rc}$ не учитывается ($A_{rc} = 0$).
Если без учета сжатой арматуры высота сжатой зоны $x_1\le 2a_{rc}$, а при учете сжатой арматуры $x_2 < 2 a_{rc}$, то предельный момент допускается вычислять по формуле:
\begin{equation}
M_{max,sc} = (R_p A_p + N_r) (h_0 - a_{rc})
\end{equation}

#+begin_src clojure
  :M-max-sc
  (fnk
   ""
   [Rp Ap Nr h0 arc]
   (* (+ Nr (* Rp Ap))
      (- h0 arc)))
#+end_src

**** Параметры по умолчанию
По умолчанию считается, что напрягаемая арматура отсутствует:
#+begin_src clojure
  :Ap  (fnk [] ((pow si/m 2) 0))
  :Apc (fnk [] ((pow si/m 2) 0))

  :Rp (fnk [] (si/MPa 0))
  :Rpc (fnk [] (si/MPa 500))

  :ap (fnk [] (si/m 0))
  :apc (fnk [] (si/m 0))

  :sigma-pc1 (fnk [] (si/MPa 0))
  :sigma-p (fnk [] (si/MPa 0))

#+end_src

**** Код потока
#+begin_src clojure :noweb yes :noweb-ref rect-bending-flow
  (def rect-bending-flow
    (flow
     {
      <<rect-bending>>
      }))
#+end_src
*** Расчет тавровых сечений
:PROPERTIES:
:NAME:     T-bending
:noweb-ref: T-bending
:END:
**** $M_{max}$ --- Предельный момент
Если граница сжатой зоны проходит в ребре, предельный момент определяется по формуле:
\begin{equation}
M_{max} = R_c b x (h_0 - 0.5 x) + R_c (b_f - b) h_f (h_0 - 0.5 h_f)
 + N_{rc} (h_{01} - a_{rc}) + \sigma_{pc} A_{pc} (h_0 - a_p)
\end{equation}

#+begin_src clojure
   :M-max
  (fnk
   ""
   [Rc b x bf hf h0 h01 Nrc arc sigma-pc Apc apc]
   (+ (* Rc b x
         (- h0 (* 0.5 x)))
      (* Rc (- bf b) hf
         (- h0 (* 0.5 hf)))
      (* Nrc
         (- h01 arc))
      (* sigma-pc Apc
         (- h0 apc))))
#+end_src

**** Высота сжатой зоны при условии, что нейтральная ось проходит в ребре
\begin{equation}
x = \frac{R_p A_p + N_r - N_{rc} - \sigma_{pc} A_{pc} - R_c h_f (b_f - b)} {R_c b}
\end{equation}

#+begin_src clojure
  :x
  (fnk
   ""
   [Rc b bf hf Ap Apc Rp sigma-pc Nr Nrc]
   (/ (+ (* Rp Ap)
         Nr
         (* -1 Nrc)
         (* -1 sigma-pc Apc)
         (* -1 Rc hf (- bf b)))
      (* Rc b)))
#+end_src


**** Код потока
#+begin_src clojure :noweb yes :noweb-ref T-bending-flow
  (def T-bending-flow
    (merge rect-bending-flow
           (flow
            {
             <<T-bending>>
             })))
#+end_src

** Расчет ширины раскрытия нормальных трещин
*** Прямоугольные сечения без преднапрягаемой арматуры
:PROPERTIES:
:NAME: rect-crack-width
:noweb-ref: rect-crack-width
:END:

**** Ширина раскрытия нормальных трещин в растянутой зоне
Ширину раскрытия нормальных трещин в железобетонных элементов следует определять по формуле:
\begin{equation}
a_{cr} = \cfrac{\sigma_r}{E_r}\psi_{cr} \le \Delta_{cr}
\end{equation}

где:
- $\sigma_r$ --- растягивающее напряжение в наиболее растянутых (крайних) стержнях;
- $E_r$ --- модуль упругости ненапрягаемой арматуры;
- $\psi_{cr}$ --- коэффициент раскрытия трещин, определяемый в зависимости от радиуса армирования;
- $\Delta_{cr}$ --- предельное значение расчетной ширины раскрытия трещин.

#+begin_src clojure
  :a-cr
  (fnk
   [sigma-r Er psi-cr]
   (* psi-cr (/ sigma-r Er)))
#+end_src

Предельно допустимый момент при условии $a_{cr} = \Delta_{cr}$
\begin{equation}
M_{max,cr} = \cfrac{\Delta_{cr}}{\psi_{cr}} \cfrac{E_r I_{red,el}}{n' Z_r}
\end{equation}

#+begin_src clojure
  :M-max-cr
  (fnk
   [delta-cr Er I-red-el n' Zr psi-cr]
   (/ (* delta-cr Er I-red-el)
      (* n' Zr psi-cr)))
#+end_src

**** Коэффициент раскрытия трещин $\psi$
Коэффициент раскрытия трещин $\psi$ следует принимать в зависимости от
радиуса армирования $R_{cr}$ (см):
- $0.35 R_{cr}$ --- для гладкой стержневой арматуры, арматурных пучков из гладкой проволоки и стальных закрытых канатов;
- $1.5 \sqrt{R_{cr}}$ --- для стержневой арматуры периодического профиля, проволок периодического профиля, пучков из этой проволоки, канатов класса К7 и пучков из них,
стальных канатов со спиральной и двойной свивкой, а также любой арматуры в стенках.

#+begin_src clojure
  :psi-cr
  (fnk
   [R-cr]
   (si/cm (* 1.5 (sqrt (:magnitude (si/cm R-cr))))))
#+end_src

**** Радиус армирования
Радиус армирования определяется по формуле:
\begin{equation}
R_{cr} = \cfrac{A_{cr}}{\sum \beta n d}
\end{equation}

где:
 - $A_{cr}$ --- площадь зоны взаимодействия для нормального сечения, принимаемая ограниченным наружним контуром сечения и радиусом взаимодействия $r = 6d$;
 - $\beta$ --- коэффициент, учитывающий степень сцепления арматурных элементов с бетоном;
 - $n_d$ --- число арматурных элементов с одинаковым номинальным диаметром $d$;
 - $d$ --- диаметр одного стержня.

#+begin_src clojure
  :R-cr
  (fnk
   [A-cr bottom-rebar]
   (let [d (map :d bottom-rebar)
         n (map :n bottom-rebar)
         beta-cr (map :beta-cr bottom-rebar)]
     (/ A-cr
        (apply + (map * beta-cr d n)))))
#+end_src

**** Площадь зоны взаимодействия $A_{cr}$
Площадь зоны взаимодействия $A_{cr}$ ограничена контуром сечения и
радиусом взаимодействия $r = 6d$, откладываемым от крайего в сторону
нейтральной оси стержня растянутой арматуры. Зона взаимодействия не
должна выходить за нейтральную ось изгибаемого элемента.
\begin{equation}
A_{cr} = b h_r = b (a_{r,cr} + 6d)
\end{equation}
где $h_r$ --- высота зоны взаимодействия.

#+begin_src clojure
  :A-cr
  (fnk
   [b hr]
   (* b hr))

  :hr
  (fnk
   [ar-cr h x-el d-cr]
   (min (- h x-el)
        (+ ar-cr (* 6 d-cr))))
#+end_src

Расстояние от растянутой грани сечения до крайнего в сторону
нейтральной оси стержня арматуры, при условии, что в данном крайнем
ряду стержней содержится не менее половины площади арматуры по
отношению ко всем другим рядам стержней.

#+begin_src clojure
  [ar-cr d-cr]
       (fnk
        [bottom-rebar]
        (let [rb bottom-rebar
              rb (map (fn [{:keys [rebar n d] :as row}]
                        (assoc row :Ar (* n ((:A rebar) d))))
                      rb)
              Ar-max (apply max (map :Ar rb))]
          (map (reduce #(if (> (:ar %1) (:ar %2)) %1 %2)
                       (filter #(>= (:Ar %) (* 0.5 Ar-max))
                               rb))
               [:ar :d])))
#+end_src

**** Напряжения в растянутой арматуре $\sigma_r$
Напряжения в растянутой арматуре вычисляются в предположении упругой
работы железобетонного сечения от действия нормативного момента:
\begin{equation}
\sigma_r = n' \cfrac{M_{ser}}{I_{red,el}}Z_r
\end{equation}
где:
- $M_{ser}$ --- нормативный изгибающий момент в сечении;
- $I_{red,el}$ --- приведенный к бетону момент инерции сечения,
  вычисленный в предположении упругой работы сечения без учета бетона
  растянутой зоны;
- $Z_r$ --- расстояние от нейтральной оси до центра тяжести растянутой
  рабочей арматуры;
- $n'$ --- коэффициент приведения арматуры к бетону с учетом длительных
  процессов усадки и ползучести.

#+begin_src clojure
  :sigma-r
  (fnk
   [M-ser I-red-el Zr n']
   (* n' (/ M-ser I-red-el)
      Zr))
#+end_src

**** Геометрические характеристики приведенного сечения
Положение нейтральной оси приведенного к бетону сечения без учета
бетона сжатой зоны определяется через равенство статических моментов
сжатого бетона, сжатой арматуры и растянутой арматуры:
\begin{equation}
\cfrac{b x_{el}^2}{2} + n' \left(A_{rc,red}(x_{el}-a_{rc,red}) - A_{r,red} (h - x_{el} - a_{r,red}) \right) = 0
\end{equation}
где $x_{el}$ --- высота сжатой зоны бетона.

#+begin_src clojure
  :x-el
  (fnk
   [n' b h Ar-red Arc-red ar-red arc-red]
   (let [A (* 1/2 b)
         B (* n' (+ Ar-red Arc-red))
         C (* n' (- (* Ar-red ar-red)
                    (* Ar-red h)
                    (* Arc-red arc-red)))
         D (- (pow B 2) (* 4 A C))]
     (/ (+ (- B) (sqrt D))
        2 A)))

  :Zr
  (fnk
   [x-el h ar-red]
   (- h x-el ar-red))
#+end_src

Момент инерции сечения:
\begin{equation}
I_{red,el} = \cfrac{b x_{el}^3}{3} + n' \left(A_{rc,red} (x_{el} - a_{rc,red})^2 +  A_{r,red} (h - x_{el} - a_{r,red})^2 \right)
\end{equation}

#+begin_src clojure
  :I-red-el
  (fnk
   [Ar-red Arc-red n' b h x-el ar-red arc-red]
   (+ (* 1/3 b (pow x-el 3))
      (* n'
         (+ (* Arc-red (pow (- x-el arc-red)  2))
            (* Ar-red  (pow (- h x-el ar-red) 2))))))
#+end_src

Характеристики арматурных стержней приводятся к одному классу арматуры:
#+begin_src clojure
  [top-rebar bottom-rebar]
  (fnk
   [reinf]
   (map reinf [:top :bottom]))

  :Ar-red
  (fnk
   [bottom-rebar Er]
   (apply + ((pow si/cm 2) 0)
          (map (fn [{:keys [n d rebar]}]
                 (* n ((:A rebar) d)
                    (/ (:Er rebar)
                       Er)))
               bottom-rebar)))

  :Arc-red
  (fnk
   [top-rebar Er]
   (apply + ((pow si/cm 2) 0)
          (map (fn [{:keys [n d rebar]}]
                 (* n ((:A rebar) d)
                    (/ (:Er rebar)
                       Er)))
               top-rebar)))

  :ar-red
  (fnk
   [bottom-rebar Ar-red Er]
   (/ (apply + (pow (si/cm 0) 3)
           (map (fn [{:keys [n d rebar ar]}]
                  (* ar
                     n ((:A rebar) d)
                     (/ (:Er rebar)
                        Er)))
                bottom-rebar))
      Ar-red))

  :arc-red
  (fnk
   [top-rebar Arc-red Er]
   (if (zero? Arc-red)
     (si/m 0)
     (/ (apply + (pow (si/cm 0) 3)
               (map (fn [{:keys [n d rebar ar]}]
                      (* ar
                         n ((:A rebar) d)
                         (/ (:Er rebar)
                            Er)))
                    top-rebar))
        Arc-red)))
#+end_src

**** Проверка трещиностойкости сжатого бетона
Напряжения в сжатой фибре изгибаемого бетонного элемента не должны
превышать $R_{c,mc2}$
\begin{equation}
\sigma_c = \cfrac{M_{ser}}{I_{red,el}} x_{el} \le R_{c,mc2}
\end{equation}

#+begin_src clojure
  :sigma-c
  (fnk
   [I-red-el x-el M-ser]
   (* (/ M-ser I-red-el) x-el))
#+end_src

Предельный момент при условии $\sigma_c = R_{c,mc2}$
\begin{equation}
M_{max,mc2} = \cfrac{R_{c,mc2} I_{red,el}} {x_{el}}
\end{equation}

#+begin_src clojure
  :M-max-mc2
  (fnk
   [I-red-el x-el Rc-mc2]
   (/ (* Rc-mc2 I-red-el)
      x-el))
#+end_src

**** Код потока
#+begin_src clojure :noweb yes :noweb-ref rect-crack-width-flow
  (def rect-crack-width-flow
    (merge
     (flow
      {
       <<rect-crack-width>>
       })
     (select-keys rect-bending-flow [:Ar :Arc])))
#+end_src


*** Тавровые сечения без преднапрягаемой арматуры
:PROPERTIES:
:NAME: T-crack-width
:noweb-ref: T-crack-width
:END:

**** Геометрические характеристики приведенного сечения
Положение нейтральной оси приведенного к бетону сечения без учета
бетона сжатой зоны определяется через равенство статических моментов
сжатого бетона, сжатой арматуры и растянутой арматуры:
\begin{equation}
\cfrac{b x_{el}^2}{2} + h_f (b_f - b) \left (x_{el} - \cfrac{h_f}{2} \right)
 + n' \left(A_{rc,red}(x_{el}-a_{rc,red}) - A_{r,red} (h - x_{el} - a_{r,red}) \right) = 0
\end{equation}
где $x_{el}$ --- высота сжатой зоны бетона.

#+begin_src clojure
  :x-el
  (fnk
   [n' b h bf hf Ar-red Arc-red ar-red arc-red]
   (let [A (* 1/2 b)
         B (+ (* n' (+ Ar-red Arc-red))
              (* hf (- bf b)))
         C (+ (* n' (- (* Ar-red ar-red)
                       (* Ar-red h)
                       (* Arc-red arc-red)))
              (* -1/2 hf hf (- bf b)))
         D (- (pow B 2) (* 4 A C))]
     (/ (+ (- B) (sqrt D))
        2 A)))

  :Zr
  (fnk
   [x-el h ar-red]
   (- h x-el ar-red))
#+end_src

Момент инерции сечения:
\begin{equation}
I_{red,el} = \cfrac{b x_{el}^3}{3} + \cfrac{(b_f - b) h_f^3}{12}
+ h_f (b_f - b) \left (x_{el} - \cfrac{h_f}{2} \right)^2
+ n' \left(A_{rc,red} (x_{el} - a_{rc,red})^2 +  A_{r,red} (h - x_{el} - a_{r,red})^2 \right)
\end{equation}

#+begin_src clojure
  :I-red-el
  (fnk
   [Ar-red Arc-red n' b h hf bf x-el ar-red arc-red]
   (+ (* 1/3 b (pow x-el 3))
      (* 1/12 (- bf b) (pow hf 3))
      (* hf (- bf b) (pow (- x-el (* 0.5 hf)) 2))
      (* n'
         (+ (* Arc-red (pow (- x-el arc-red)  2))
            (* Ar-red  (pow (- h x-el ar-red) 2))))))
#+end_src

**** Код потока
#+begin_src clojure :noweb yes :noweb-ref T-crack-width-flow
  (def T-crack-width-flow
    (merge
     rect-crack-width-flow
     (flow
      {
       <<T-crack-width>>
       })))
#+end_src



** Код модуля
:PROPERTIES:
:noweb: yes
:tangle: ../../../src/shakhov/snip/concrete.clj
:END:

*** Заголовок
#+begin_src clojure
  (ns shakhov.snip.concrete
    (:refer-clojure :exclude [time force + - * / < > <= >= = zero? pos? neg? sgn abs
                              sin cos tan asin acos atan exp log min max])

    (:use [shakhov.flow.core]
          [shakhov.snip.utils])

    (:use [clojure.algo.generic.arithmetic :only [+ - * /]]
          [clojure.algo.generic.comparison :only [< > <= >= = zero? pos? neg? min max]]
          [clojure.algo.generic.math-functions :only [pow sqrt sgn abs sin cos tan
                                                      asin acos atan exp log]])
    (:require [shakhov.snip.dimensions :as dim]
              [shakhov.snip.units :as si]))
#+end_src

*** Потоки
#+begin_src clojure
  <<xi-flow>>
  <<rect-bending-flow>>
  <<T-bending-flow>>
  <<rect-crack-width-flow>>
  <<T-crack-width-flow>>
#+end_src

*** Расчётные функции
**** Расчет прочности бетонных сечений
Задаются параметры по умолчанию. Прозводится пробный расчет с учетом и
без учета сжатой арматуры, выбирается расчетный случай. В зависимости
от возможности учета сжатой арматуры определяется предельно допустимый
изгибающий момент.

#+begin_src clojure
  (let [lazy-rect (lazy-compile (merge xi-flow rect-bending-flow))
        lazy-T    (lazy-compile (merge xi-flow T-bending-flow))]

    (defn cs-bending
      [flow input]
      (let [no-Arc  (flow (update-in input [:reinf :top]
                                     (fn [t] (mapv #(assoc % :n 0) t))))
            all-Arc (flow input)
            arc (:arc all-Arc)]
        (cond
         (<  (:x no-Arc) (* 2 arc)) (dissoc  no-Arc :M-max-sc)
         (>= (:x all-Arc)(* 2 arc)) (dissoc all-Arc :M-max-sc)
         :else (assoc (dissoc all-Arc :M-max)
                 :x (* 2 arc)))))

    (def rect-bending
      (fnk
       {:keys [Rc b h reinf] :as args}
       (cs-bending lazy-rect args)))

    (def T-bending
      (fnk
       {:keys [Rc b h bf hf reinf] :as args}
       (cs-bending lazy-T args)))

    (def bending
      (fnk
       {:keys [Rc b h reinf] :as args}
       (if (and (:hf args)
                (:bf args))
         (let [as-rect (rect-bending (assoc args :b (:bf args)))
               as-T    (T-bending    args)]
           (if (<= (:x as-rect) (:hf args))
             (assoc as-rect :as "[]")
             (assoc as-T :as "T")))
         (assoc (rect-bending args) :as "[]")))))
#+end_src

**** Ширина раскрытия трещин
Проверка ширины раскрытия трещин, определение предельно допустимых моментов.

#+begin_src clojure
  (let [lazy-rect-cracking (lazy-compile rect-crack-width-flow)
        lazy-T-cracking    (lazy-compile T-crack-width-flow)]

    (def rect-cracking
      (fnk
       {:keys [h b reinf Er Rc-mc2] :as args}
       (lazy-rect-cracking args)))

    (def T-cracking
      (fnk
       {:keys [h b hf bf reinf Er Rc-mc2] :as args}
       (lazy-T-cracking args)))

    (def cracking
      (fnk
       {:keys [h b reinf Er Rc-mc2] :as args}
       (if (and (:hf args)
                (:bf args))
         (let [as-rect (rect-cracking (assoc args :b (:bf args)))
               as-T    (T-cracking    args)]
           (if (<= (:x-el as-T) (:hf args))
             (assoc as-rect :as "[]")
             (assoc as-T :as "T")))
         (assoc (rect-cracking args) :as "[]")))))
#+end_src
